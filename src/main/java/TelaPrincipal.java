
import back_end.Agenda;
import back_end.Animal;
import back_end.Consulta;
import back_end.DadosApp;
import back_end.Funcionario;
import back_end.Popular;
import back_end.Tutor;
import back_end.Vacina;
import back_end.Veterinario;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/MDIApplication.java to edit this template
 */

/**
 *
 * @author T-GAMER
 */
public class TelaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form TelaPrincipal
     */
    public TelaPrincipal() {
        initComponents();
        corrigirIcones();
        setLocationRelativeTo(null);
        Popular popularDados = new Popular();
        
    }

    private void corrigirIcones() {
    try {
        fileMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/door_out.png")));
    } catch (Exception e) {
        System.out.println("Erro ao carregar ícone do menu: " + e.getMessage());
    }
}

    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desktopPane = new javax.swing.JDesktopPane();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        CadastrarAnimal = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        vacinar = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        atualizarFuncionario = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        atualizarVacina = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        pesquisaPessoa = new javax.swing.JMenuItem();
        pesquisaAnimal = new javax.swing.JMenuItem();
        Vacinas = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fileMenu.setMnemonic('f');
        fileMenu.setText("Cadastro");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Veterinario");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Funcionario");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Tutor");
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Vacina");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        CadastrarAnimal.setText("Animal");
        CadastrarAnimal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CadastrarAnimalActionPerformed(evt);
            }
        });
        fileMenu.add(CadastrarAnimal);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Atendimentos");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Consultas");
        cutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(cutMenuItem);

        vacinar.setText("Vacinas");
        vacinar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vacinarActionPerformed(evt);
            }
        });
        editMenu.add(vacinar);

        menuBar.add(editMenu);

        jMenu1.setText("Editar");

        jMenuItem6.setText("Tutor ");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        atualizarFuncionario.setText("Funcionário");
        atualizarFuncionario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atualizarFuncionarioActionPerformed(evt);
            }
        });
        jMenu1.add(atualizarFuncionario);

        jMenuItem2.setText("Animal");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        atualizarVacina.setText("Vacina");
        atualizarVacina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atualizarVacinaActionPerformed(evt);
            }
        });
        jMenu1.add(atualizarVacina);

        jMenuItem1.setText("Agendamento");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem3.setText("Consulta");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        menuBar.add(jMenu1);

        jMenu2.setText("Pesquisa");

        pesquisaPessoa.setText("Pessoa");
        pesquisaPessoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pesquisaPessoaActionPerformed(evt);
            }
        });
        jMenu2.add(pesquisaPessoa);

        pesquisaAnimal.setText("Animal");
        pesquisaAnimal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAnimalActionPerformed(evt);
            }
        });
        jMenu2.add(pesquisaAnimal);

        Vacinas.setSelected(true);
        Vacinas.setText("Vacina");
        Vacinas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VacinasActionPerformed(evt);
            }
        });
        jMenu2.add(Vacinas);

        menuBar.add(jMenu2);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(desktopPane, javax.swing.GroupLayout.PREFERRED_SIZE, 621, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(desktopPane, javax.swing.GroupLayout.PREFERRED_SIZE, 477, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        CadVacina cadVac = new CadVacina();
        cadVac.setVisible(true);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // TODO add your handling code here:
        CadVet cad = new CadVet();
        cad.setVisible(true);
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
            // TODO add your handling code here:
        CadFuncionario cadFunc = new CadFuncionario();
        cadFunc.setVisible(true);
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        // TODO add your handling code here:
        CadTutor cad = new CadTutor();
        cad.setVisible(true);
        
    }//GEN-LAST:event_saveAsMenuItemActionPerformed



    private void pesquisaPessoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesquisaPessoaActionPerformed
        // TODO add your handling code here:
        PesqPessoa pesqPessoa;
        pesqPessoa = new PesqPessoa();
        pesqPessoa.setVisible(true);
    }//GEN-LAST:event_pesquisaPessoaActionPerformed

    private void addAnimalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAnimalActionPerformed
        // TODO add your handling code here:
        String cpfTutor = JOptionPane.showInputDialog(this, "Digite o CPF do Tutor:");
        String nomeAnimal = JOptionPane.showInputDialog(this, "Digite o Nome do Animal:");
        
        Tutor t = buscarTutor(DadosApp.clinica.getTutores(), cpfTutor);
        if(t == null){
                JOptionPane.showMessageDialog(this, "Tutor não encontrado.");
        } else{
            Animal an = buscarAnimal(t.getAnimais(), nomeAnimal);
            if(an == null){
                JOptionPane.showMessageDialog(this, "Animal não encontrado.");
            }
            else {
                InfoAnimal pesqAnimal;
                pesqAnimal = new InfoAnimal();
                pesqAnimal.imprimir(an);
                pesqAnimal.setVisible(true);
            }
        }
        
       

        
      
    }//GEN-LAST:event_addAnimalActionPerformed

    private void CadastrarAnimalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CadastrarAnimalActionPerformed
        // TODO add your handling code here:
        CadAnimal cadA = new CadAnimal();
        cadA.setVisible(true);
    }//GEN-LAST:event_CadastrarAnimalActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        String cpfBusca = JOptionPane.showInputDialog(this, "Digite o CPF do Tutor:");

        Tutor tutorEncontrado = buscarTutor(DadosApp.clinica.getTutores(), cpfBusca);

        if (tutorEncontrado != null) {
            CadTutor tela = new CadTutor(true); // modo edição
            tela.inserirDados(tutorEncontrado); // esse tutor já foi encontrado antes
            tela.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Tutor não encontrado.");
        }
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void atualizarFuncionarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atualizarFuncionarioActionPerformed
        // TODO add your handling code here:
        String cpfBusca = JOptionPane.showInputDialog(this, "Digite o CPF do Funcionario:");
        Funcionario funcionarioSelecionado = buscarFuncionario(DadosApp.clinica.getFuncionarios(), cpfBusca);
        
        if(funcionarioSelecionado != null){
            CadFuncionario tela = new CadFuncionario(true);
            tela.funcEncontrado = funcionarioSelecionado;
            tela.inserirDados(funcionarioSelecionado);
            tela.setVisible(true);
            
        } else {
            JOptionPane.showMessageDialog(null, "Funcionário não encontrado para atualização!", "Erro", JOptionPane.ERROR_MESSAGE);

        }

            
        
    }//GEN-LAST:event_atualizarFuncionarioActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        String cpfBusca = JOptionPane.showInputDialog(this, "Digite o CPF do Tutor:");
        String nomeBusca = JOptionPane.showInputDialog(this, "Digite o Nome do Animal:");

        Tutor tutorEncontrado = buscarTutor(DadosApp.clinica.getTutores(), cpfBusca);

        if (tutorEncontrado != null) {
            Animal animalEncontrado  = buscarAnimal(tutorEncontrado.getAnimais(), nomeBusca);
            if (animalEncontrado == null) {
                JOptionPane.showMessageDialog(this, "Animal não encontrado.");
            }   else {
                    CadAnimal telaCadastro = new CadAnimal(true); // passa tutor encontrado
                    telaCadastro.inserirDados(animalEncontrado);
                    telaCadastro.setVisible(true);
            
            }
            
        } else {
            JOptionPane.showMessageDialog(null, "Tutor não encontrado para atualização!", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void atualizarVacinaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atualizarVacinaActionPerformed
        // TODO add your handling code here:
        String vacina = JOptionPane.showInputDialog(this, "Digite o nome da vacina:");
        for(Vacina vac: DadosApp.clinica.getVacinas()){
            if(vac.getNome().equalsIgnoreCase(vacina)){
                CadVacina cadVac = new CadVacina(true, vac);
                cadVac.setVisible(true);
                return;
            }
        }
        JOptionPane.showMessageDialog(this,"Vacina não encontrada");
        
    }//GEN-LAST:event_atualizarVacinaActionPerformed

    private void VacinasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VacinasActionPerformed

    String[] opcoes = {"Listar todas", "Buscar por nome"};
    int opcao = JOptionPane.showOptionDialog(
        this,
        "Escolha uma opção:",
        "Vacinas",
        JOptionPane.DEFAULT_OPTION,
        JOptionPane.QUESTION_MESSAGE,
        null,
        opcoes,
        opcoes[0]
    );

    if (opcao == 0) {

        StringBuilder sb = new StringBuilder();
        for (Vacina vac : DadosApp.clinica.getVacinas()) {
            sb.append("Nome: ").append(vac.getNome())
              .append("\nPreço: R$ ").append(vac.getPreco())
              .append("\nVencimento: ").append(vac.getDataVencimento())
              .append("\n------------------\n");
        }

        if (sb.length() == 0) {
            JOptionPane.showMessageDialog(this, "Nenhuma vacina cadastrada.");
        } else {
            JOptionPane.showMessageDialog(this, sb.toString(), "Lista de Vacinas", JOptionPane.INFORMATION_MESSAGE);
        }

    } else if (opcao == 1) {

        String nomeBusca = JOptionPane.showInputDialog(this, "Digite o nome da vacina:");
        if (nomeBusca == null || nomeBusca.trim().isEmpty()) return;

        for (Vacina vac : DadosApp.clinica.getVacinas()) {
            if (vac.getNome().equalsIgnoreCase(nomeBusca.trim())) {
                String info = "Nome: " + vac.getNome()
                            + "\nPreço: R$ " + vac.getPreco()
                            + "\nVencimento: " + vac.getDataVencimento();
                JOptionPane.showMessageDialog(this, info, "Vacina Encontrada", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
        }
        JOptionPane.showMessageDialog(this, "Vacina não encontrada.");
    }


        
    }//GEN-LAST:event_VacinasActionPerformed

    private void vacinarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vacinarActionPerformed
        // TODO add your handling code here:
        Vacinar vacinar = new Vacinar();
        vacinar.setVisible(true);
    }//GEN-LAST:event_vacinarActionPerformed

    private void cutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutMenuItemActionPerformed
        // TODO add your handling code here:
        String[] opcoes = {
            "Realizar agendamento de consulta", 
            "Cadastrar uma consulta não marcada"                     
        };

        int opcao = JOptionPane.showOptionDialog(
            this,
            "Escolha uma opção:",
            "Cadastrando uma consulta",
            JOptionPane.DEFAULT_OPTION,
            JOptionPane.QUESTION_MESSAGE,
            null,
            opcoes,
            opcoes[1] 
        );
        
        if(opcao == 0){
            CadAgendamento telaAgendamento = new CadAgendamento();
            telaAgendamento.setVisible(true);
        } else {
            
            LocalDateTime agora = LocalDateTime.now();
            LocalDateTime proximo = DadosApp.clinica.proximoHorarioDisponivel(agora);
        
            int opcao2 = JOptionPane.showConfirmDialog (this,
                        "\nPróximo horário disponível: "
                      + proximo.format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm"))
                      + "\nDeseja agendar nesse horário?",
                        "Horário ocupado",
                        JOptionPane.YES_NO_OPTION);

                    if (opcao2 == JOptionPane.YES_OPTION) {
                                CadConsulta telaConsulta = new CadConsulta();
                                telaConsulta.setVisible(true);
                                dispose();
                    } else{
                        JOptionPane.showMessageDialog(this, "Cadastro de consulta cancelado!");
                    }
        }

        
    }//GEN-LAST:event_cutMenuItemActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
            String dataHoraStr = JOptionPane.showInputDialog(
                this,
                "Digite o dia e horário do agendamento (formato: dd/MM/yyyy HH:mm):"
            );

            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
            LocalDateTime dataHora;

            try {
                // Converte string para LocalDateTime
                dataHora = LocalDateTime.parse(dataHoraStr, formatter);
            } catch (DateTimeParseException e) {
                JOptionPane.showMessageDialog(this, "Formato de data/hora inválido! Use dd/MM/yyyy HH:mm");
                return;
            }

            Agenda agendaEncontrada = null;
            for (Agenda ag : DadosApp.clinica.getAgendamentos()) {
                if (ag.getDiaHorario().equals(dataHora)) {
                    agendaEncontrada = ag;
                    break;
                }
            }

            if (agendaEncontrada != null) {
                CadAgendamento agendamentoEditar = new CadAgendamento();
                agendamentoEditar.inserirDados(agendaEncontrada);
                agendamentoEditar.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(this, "Nenhum agendamento encontrado para essa data e horário.");
            }

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        // Digita a data e hora da consulta que quer editar
            String dataHoraStr = JOptionPane.showInputDialog(null, "Digite a data e hora da consulta (dd/MM/yyyy HH:mm):");
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
            LocalDateTime dataHoraConsulta;

            try {
                dataHoraConsulta = LocalDateTime.parse(dataHoraStr, formatter);
            } catch (DateTimeParseException e) {
                JOptionPane.showMessageDialog(null, "Formato inválido de data/hora!");
                return;
            }

            // Procurar consulta na lista da clínica
            Consulta consultaEditar = null;
            for (Consulta c : DadosApp.clinica.getConsultas()) {
                if (c.getDataHora().equals(dataHoraConsulta)) {
                    consultaEditar = c;
                    break;
                }
            }

            if (consultaEditar != null) {
                CadConsulta editarConsulta = new CadConsulta();
                editarConsulta.inserirDados(consultaEditar);
                editarConsulta.editarConsulta(consultaEditar);
                editarConsulta.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(null, "Consulta não encontrada para essa data e hora.");
            }

    }//GEN-LAST:event_jMenuItem3ActionPerformed


    public Tutor buscarTutor(ArrayList <Tutor> tutores, String cpfBusca){
         if (cpfBusca != null && !cpfBusca.trim().isEmpty()) {  // Check if user didn't cancel or enter empty string
            for (Tutor t : tutores) {
                if (t.getCpf().equals(cpfBusca)) {
                    return t;
                }
            }
        }
        return null;
    }
    
    public Animal buscarAnimal (ArrayList<Animal> animaisDoTutor, String nomeAnimal){
        for(Animal an: animaisDoTutor){
                if(an.getNome().equals(nomeAnimal)){
                    return an;
                }
        }
        return null;
    }
    
    
    public Funcionario buscarFuncionario(ArrayList<Funcionario> funcionarios, String cpf){
        for(Funcionario func: funcionarios){
            if(func.getCpf().equalsIgnoreCase(cpf)){
                return func;
            }
        }
        return null;
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new TelaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem CadastrarAnimal;
    private javax.swing.JCheckBoxMenuItem Vacinas;
    private javax.swing.JMenuItem atualizarFuncionario;
    private javax.swing.JMenuItem atualizarVacina;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pesquisaAnimal;
    private javax.swing.JMenuItem pesquisaPessoa;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JMenuItem vacinar;
    // End of variables declaration//GEN-END:variables

}
